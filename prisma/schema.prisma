generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model role {
  role_id    Int       @id @default(autoincrement())
  name       String    @unique(map: "name") @db.VarChar(50)
  created_at DateTime? @default(now()) @db.DateTime(0)
  user       user[]
}

model user {
  user_id       Int       @id @default(autoincrement())
  role_id       Int
  username      String    @unique(map: "username") @db.VarChar(50)
  email         String    @unique(map: "email") @db.VarChar(100)
  password      String    @db.VarChar(255)
  full_name     String    @db.VarChar(100)
  refresh_token String?   @db.VarChar(255)
  phone         String?   @db.VarChar(20)
  dob           DateTime? @db.Date
  address       String?   @db.Text
  avatar        String?   @db.VarChar(255)
  is_active     Boolean?  @default(true)
  registered_at DateTime? @default(now()) @db.DateTime(0)
  updated_at    DateTime? @db.DateTime(0)
  role          role      @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "user_ibfk_1")

  @@index([role_id], map: "role_id")
}

model cinema {
  cinema_id   Int       @id @default(autoincrement())
  cineplex_id Int?
  name        String    @unique(map: "name") @db.VarChar(125)
  slug        String    @unique(map: "slug") @db.VarChar(100)
  logo        String?   @db.VarChar(255)
  avatar      String?   @db.VarChar(255)
  address     String?   @db.Text
  latitude    Decimal?  @db.Decimal(10, 8)
  longitude   Decimal?  @db.Decimal(11, 8)
  map_embed   String?   @db.Text
  rating      Float?    @db.Float
  is_deleted  Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.DateTime(0)
  cineplex    cineplex? @relation(fields: [cineplex_id], references: [cineplex_id], onDelete: NoAction, onUpdate: NoAction, map: "cinema_ibfk_1")
  theater     theater[]

  @@index([cineplex_id], map: "cineplex_id")
}

model cineplex {
  cineplex_id Int       @id @default(autoincrement())
  name        String    @unique(map: "name") @db.VarChar(100)
  slug        String    @unique(map: "slug") @db.VarChar(100)
  code        String    @unique(map: "code") @db.VarChar(20)
  logo        String?   @db.VarChar(255)
  is_deleted  Boolean   @default(false)
  created_at  DateTime? @default(now()) @db.DateTime(0)
  cinema      cinema[]
}

model genre {
  genre_id   Int       @id @default(autoincrement())
  name       String    @unique(map: "name") @db.VarChar(50)
  created_at DateTime? @default(now()) @db.DateTime(0)
  movie      movie[]
}

model movie {
  movie_id          Int       @id @default(autoincrement())
  genre_id          Int?
  title             String    @unique(map: "title") @db.VarChar(255)
  slug              String    @unique(map: "slug") @db.VarChar(100)
  description       String?   @db.Text
  short_description String?   @db.Text
  duration          Int?
  trailer           String?   @db.VarChar(255)
  opening_date      DateTime? @db.DateTime(0)
  poster_url        String?   @db.VarChar(255)
  banner_url        String?   @db.VarChar(255)
  is_now_showing    Boolean?  @default(false)
  is_coming_soon    Boolean?  @default(false)
  is_active         Boolean?  @default(true)
  rating            Float?    @db.Float
  created_at        DateTime? @default(now()) @db.DateTime(0)
  genre             genre?    @relation(fields: [genre_id], references: [genre_id], onDelete: NoAction, onUpdate: NoAction, map: "movie_ibfk_1")

  @@index([genre_id], map: "genre_id")
}

model theater {
  theater_id      Int           @id @default(autoincrement())
  theater_type_id Int?
  cinema_id       Int
  name            String        @db.VarChar(100)
  height          Int
  width           Int
  created_at      DateTime?     @default(now()) @db.DateTime(0)
  cinema          cinema        @relation(fields: [cinema_id], references: [cinema_id], onDelete: NoAction, onUpdate: NoAction, map: "theater_ibfk_1")
  theater_type    theater_type? @relation(fields: [theater_type_id], references: [theater_type_id], onDelete: NoAction, onUpdate: NoAction, map: "theater_ibfk_2")

  @@index([cinema_id], map: "cinema_id")
  @@index([theater_type_id], map: "theater_type_id")
}

model theater_type {
  theater_type_id Int       @id @default(autoincrement())
  name            String    @unique(map: "name") @db.VarChar(50)
  created_at      DateTime? @default(now()) @db.DateTime(0)
  theater         theater[]
}
